package org.firstinspires.ftc.teamcode.hinsin;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

@TeleOp(name="Mecanum", group="Crimson")
public class Mecanum extends LinearOpMode {

    // Declare OpMode members for each of the 4 motors.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor leftFrontDrive = null;
    private DcMotor leftBackDrive = null;
    private DcMotor rightFrontDrive = null;
    private DcMotor rightBackDrive = null;
    private DcMotor Lift = null;
    
    // public Servo    testServo    = null;
    public Servo    forkliftServoLeft    = null;
    public Servo    forkliftServoRight    = null;
    
    private DigitalChannel limitButton =null;

    @Override
    public void runOpMode() {

        // Initialize the hardware variables. Note that the strings used here must correspond
        // to the names assigned during the robot configuration step on the DS or RC devices.
        leftFrontDrive  = hardwareMap.get(DcMotor.class, "FrontLeft");
        leftBackDrive  = hardwareMap.get(DcMotor.class, "BackLeft");
        rightFrontDrive = hardwareMap.get(DcMotor.class, "FrontRight");
        rightBackDrive = hardwareMap.get(DcMotor.class, "BackRight");
        Lift = hardwareMap.get(DcMotor.class, "Lift");
        
        // testServo = hardwareMap.get(Servo.class, "TestServo");
        forkliftServoLeft = hardwareMap.get(Servo.class, "ForkliftLeft");
        forkliftServoRight = hardwareMap.get(Servo.class, "ForkliftRight");
        
        limitButton = hardwareMap.get(DigitalChannel.class, "limitSensor");
        limitButton.setMode(DigitalChannel.Mode.INPUT);
        
        double ForkliftOpen = 0.0;
        double ForkliftClosed = 0.5;
        float switchStateCounter = 0;
        
        
        
        // Lift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        // testServo = hardwareMap.get(Servo.class, "TestServo");

        // ########################################################################################
        // !!!            IMPORTANT Drive Information. Test your motor directions.            !!!!!
        // ########################################################################################
        // Most robots need the motors on one side to be reversed to drive forward.
        // The motor reversals shown here are for a "direct drive" robot (the wheels turn the same direction as the motor shaft)
        // If your robot has additional gear reductions or uses a right-angled drive, it's important to ensure
        // that your motors are turning in the correct direction.  So, start out with the reversals here, BUT
        // when you first test your robot, push the left joystick forward and observe the direction the wheels turn.
        // Reverse the direction (flip FORWARD <-> REVERSE ) of any wheel that runs backward
        // Keep testing until ALL the wheels move the robot forward when you push the left joystick forward.
        // leftFrontDrive.setDirection(DcMotor.Direction.REVERSE);
        // leftBackDrive.setDirection(DcMotor.Direction.REVERSE);
        // rightFrontDrive.setDirection(DcMotor.Direction.FORWARD);
        // rightBackDrive.setDirection(DcMotor.Direction.FORWARD);

        // Wait for the game to start (driver presses PLAY)
        telemetry.addData("Status", "Initialized");
        telemetry.addData("Button", limitButton.getState());
        telemetry.update();

        waitForStart();
        runtime.reset();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {
            double max;
            
            //AreaRectangle(4, 5);

            // Get gamepad stick values
            double driveLeft   = gamepad1.left_stick_y;  // Note: pushing stick forward gives negative value
            double driveSideways =  gamepad1.left_stick_x;
            double turn     =  gamepad1.right_stick_x;
            double driveRight     =  gamepad1.right_stick_y;
            
            boolean switchState = limitButton.getState();
            
            if (!switchState)
            {
                switchStateCounter++;
            } else
            {
                switchStateCounter = 0;
            }
            
            
            // new Thread(new Runnable() {
            //     public void run() {
            //         sleep(500);
            //     }
            //     });
            
            
            if (gamepad1.a && Lift.getCurrentPosition() > -6666){
                //up
                Lift.setPower(1.0);
            } else if (gamepad1.b && Lift.getCurrentPosition() < 4500){ // && switchStateCounter < 9
                //down
                // 4882
                Lift.setPower(-1.0);
            } else
            {
                Lift.setPower(0.0);
            }
            
            if (gamepad1.y){
                // open 0.49 
                forkliftServoLeft.setPosition(0.49);
                // forkliftServoLeft.setPosition(0.5);
                // forkliftServoRight.setPosition(0.95);
            }
            if (gamepad1.x){
                // close 0.89
                forkliftServoLeft.setPosition(0.89);
                // forkliftServoLeft.setPosition(0.47);
                // forkliftServoRight.setPosition(0.66);
            }
            
            // Combine the joystick requests for each axis-motion to determine each wheel's power.
            // Set up a variable for each drive wheel to save the power level for telemetry.
            double leftFrontPower  = driveLeft - driveSideways - turn;
            double rightFrontPower = -driveLeft - driveSideways - turn;
            double leftBackPower   = driveLeft + driveSideways - turn;
            double rightBackPower  = -driveLeft + driveSideways - turn;

            // Normalize the values so no wheel power exceeds 100%
            // This ensures that the robot maintains the desired motion.
            max = Math.max(Math.abs(leftFrontPower), Math.abs(rightFrontPower));
            
            max = Math.max(max, Math.abs(leftBackPower));
            max = Math.max(max, Math.abs(rightBackPower));

            if (max > 1.0) {
                leftFrontPower  /= max;
                rightFrontPower /= max;
                leftBackPower   /= max;
                rightBackPower  /= max;
            }

            // Send calculated power to wheels
            leftFrontDrive.setPower(leftFrontPower);
            rightFrontDrive.setPower(rightFrontPower);
            leftBackDrive.setPower(leftBackPower);
            rightBackDrive.setPower(rightBackPower);

            // Show the elapsed game time and wheel power.
            int position = Lift.getCurrentPosition();
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Front left/Right", "%4.2f, %4.2f", leftFrontPower, rightFrontPower);
            telemetry.addData("Back  left/Right", "%4.2f, %4.2f", leftBackPower, rightBackPower);
            telemetry.addData("Hand Servo Position", "%4.2f", forkliftServoLeft.getPosition());
            telemetry.addData("Hand Servo Position", "%4.2f", switchStateCounter);
            // telemetry.addData("Right Servo Position", "%4.2f", forkliftServoRight.getPosition());
            telemetry.addData("Encoder Position", position);
            telemetry.addData("Button", limitButton.getState());
            telemetry.update();
            sleep(1);
        }
    }
    
    public double AreaRectangle(double width, double height) {
        double area = width * height;
        return area;
    }
    
}
